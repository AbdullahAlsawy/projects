# # 1. إنشاء نوافذ وتطبيقات رسومية بسيطة
# # الاستخدام: بناء واجهة رسومية تحتوي على أزرار، مربعات نص، إلخ.
# # مثال:

# import tkinter as tk

# root = tk.Tk() # هذا السطر يقوم بإنشاء نافذة التطبيق الرئيسية (غالبًا تسمى "Root Window").
# root.title("نافذة بسيطة")
# root.geometry("300x200") # السطر root.geometry("300x200") يُستخدم لتحديد حجم النافذة الرئيسية في واجهة Tkinter.
# # geometry(): هي دالة تُحدد أبعاد النافذة.
# # "300×200": هذا هو الحجم المطلوب:
# # 300 = العرض بالبكسل (عرض النافذة).
# # 200 = الارتفاع بالبكسل (ارتفاع النافذة).

# label = tk.Label(root, text="مرحبًا بك في Tkinter") # السطر label = tk.Label(root, text="مرحبًا بك في Tkinter") يُستخدم لإنشاء تسمية (Label) داخل نافذة Tkinter، وهي عنصر يُعرض نصًا ثابتًا على الشاشة.
# # tk.Label: هذا هو العنصر الخاص بالتسمية في مكتبة Tkinter.
# # root: النافذة التي سنضع فيها التسمية (تُعتبر الـ "أب" أو "الحاوية").
# # text="مرحبًا بك في Tkinter": النص الذي سيظهر داخل التسمية.
# # ملاحظة: يمكن التحكم في الخط، اللون، الخلفية، المحاذاة، وغيرها، بإضافة المزيد من الخيارات داخل Label.

# label.pack() # السطر label.pack() يُستخدم لعرض التسمية (أو أي عنصر واجهة آخر) داخل النافذة بعد إنشائها.
# # 🧠 ملاحظات مهمة عن pack():
# # بسيطة وسهلة، لكن ليست مرنة جدًا إذا كنت تخطط لتصميم معقد.
# # يمكن تخصيصها بخيارات مثل:
# # side="left" أو "right" أو "top" أو "bottom" لتحديد اتجاه الإدراج.
# # padx / pady لإضافة مسافات خارجية.
# # fill="x" أو "y" أو "both" لتوسيع العنصر.
# # expand=True لتوسيع العنصر لملء المساحة المتاحة.

# root.mainloop() # السطر root.mainloop() هو آخر خطوة ضرورية لتشغيل تطبيق Tkinter فعليًا، وبدونه لن تظهر النافذة أو تستجيب لأي شيء.
# # mainloop(): تعني "الحلقة الرئيسية".
# # هي حلقة لا نهائية ينتظر فيها البرنامج تفاعلات المستخدم (مثل الضغط على زر، إغلاق النافذة، كتابة نص... إلخ).
# # طالما النافذة مفتوحة، تظل هذه الحلقة تعمل.
# # إذا أغلق المستخدم النافذة، تنتهي هذه الحلقة ويتوقف البرنامج

# # ---------------------------------------------------------------------------------------------------------
# # 2. التفاعل مع المستخدم (إدخال بيانات)
# # الاستخدام: إدخال بيانات من المستخدم عبر مربعات الإدخال.
# # مثال:

# import tkinter as tk

# def عرض_الاسم(): # جميل! الدالة عرض_الاسم() اللي كتبتها تقوم بوظيفة رائعة وبسيطة: عرض اسم المستخدم داخل التسمية (label) بعد ما يكتبه في خانة الإدخال (entry). خليني أشرح لك كل سطر بالتفصيل:
#     الاسم = entry.get() # entry.get() يعني: خذ النص اللي كتبه المستخدم في خانة الإدخال (Entry).نحفظه في متغير اسمه الاسم.
#     label.config(text=f"مرحبًا، {الاسم}") # نغيّر محتوى التسمية label باستخدام config()، بحيث تعرض النص الجديد.   f"مرحبًا، {الاسم}" هي صيغة f-string لإضافة اسم المستخدم داخل الجملة

# root = tk.Tk()
# entry = tk.Entry(root) # السطر entry = tk.Entry(root) يُستخدم لإنشاء حقل إدخال نصي في Tkinter، حيث يمكن للمستخدم كتابة بيانات (مثل الاسم، البريد، كلمة المرور... إلخ).
# entry.pack()

# button = tk.Button(root, text="أظهر الاسم", command=عرض_الاسم) # يُستخدم لإنشاء زر في واجهة Tkinter، وعند الضغط عليه، يتم تنفيذ دالة اسمها عرض_الاسم.
# # tk.Button	عنصر واجهة لإنشاء زر.
# # root	النافذة أو الحاوية التي يوضع فيها الزر.
# # text="أظهر الاسم"	النص الظاهر على الزر.
# # command=عرض_الاسم	الدالة التي تُنفذ عند الضغط على الزر (بدون أقواس!).
# # button	اسم المتغير الذي يخزن الزر حتى نقدر نتحكم فيه لاحقًا.

# button.pack()

# label = tk.Label(root, text="") # السطر label = tk.Label(root, text="") يقوم بإنشاء تسمية (Label) فارغة داخل نافذة Tkinter.
# # tk.Label	عنصر لإنشاء تسمية نصية في الواجهة.
# # root	الحاوية (النافذة الرئيسية) التي نضع فيها التسمية.
# # text=""	النص المبدئي للتسمية، وهنا فارغ (لن يظهر شيء حتى نُغيره لاحقًا).
# # label	اسم المتغير الذي يخزن التسمية حتى نتحكم بها لاحقًا.

# label.pack()

# root.mainloop()

# # ---------------------------------------------------------------------------------------------------------

# # 3. إنشاء القوائم المنسدلة (Dropdown Menus)
# # الاستخدام: السماح للمستخدم باختيار عنصر من قائمة.
# # مثال:

# import tkinter as tk

# root = tk.Tk()
# root.geometry("200x150")

# option = tk.StringVar() # السطر option = tk.StringVar() يُستخدم لإنشاء متغير مرتبط في Tkinter، حيث يمكن ربطه بعناصر واجهة المستخدم مثل قوائم الاختيارات (OptionMenu) أو مربعات الاختيار (Checkbuttons) لتخزين القيم التي يختارها المستخدم.
# # tk.StringVar(): هو نوع بيانات خاص في Tkinter يُستخدم لتخزين النصوص (strings) بطريقة ديناميكية. يمكن ربطه مع عناصر واجهة المستخدم بحيث يتم تحديث قيمه تلقائيًا عند تغيير العناصر المرتبطة به.
# # option: هو المتغير الذي يخزن القيمة المختارة (يمكن تسميته بأي اسم).

# option.set("اختر لونًا") # السطر option.set("اختر لونًا") يُستخدم لتعيين القيمة الافتراضية في المتغير المرتبط بـ StringVar، بحيث يظهر النص "اختر لونًا" كاختيار افتراضي في العناصر المرتبطة بالمتغير (مثل OptionMenu).
# # option.set(): هذه طريقة لتعيين قيمة المتغير StringVar إلى قيمة جديدة.
# # "اختر لونًا": هي القيمة التي تُعرض كاختيار افتراضي في عنصر واجهة المستخدم المرتبط بـ option، مثل OptionMenu.
# # في هذه الحالة، قيمة option ستصبح "اختر لونًا" عند بدء التطبيق أو قبل أن يختار المستخدم أي قيمة من القائمة.

# menu = tk.OptionMenu(root, option, "أحمر", "أخضر", "أزرق") # السطر menu = tk.OptionMenu(root, option, "أحمر", "أخضر", "أزرق") يُستخدم لإنشاء قائمة منسدلة (Dropdown Menu) تحتوي على عدة خيارات يمكن للمستخدم الاختيار منها.
# # tk.OptionMenu: هذا عنصر واجهة المستخدم (Widget) الذي يُنشئ قائمة منسدلة تُعرض عند النقر عليها.
# # root: هو النافذة التي سيتم عرض القائمة المنسدلة فيها.
# # option: هو المتغير من نوع StringVar الذي يخزن القيمة المُختارة من القائمة المنسدلة. هذا المتغير يتم ربطه بالقائمة بحيث تتغير قيمته بناءً على الاختيار.
# # "أحمر", "أخضر", "أزرق": هي الخيارات التي تظهر في القائمة المنسدلة.

# menu.pack()

# root.mainloop()

# # ---------------------------------------------------------------------------------------------------------

# # 4. التعامل مع الملفات (فتح / حفظ)
# # الاستخدام: السماح للمستخدم بفتح أو حفظ ملفات باستخدام نافذة النظام.
# # مثال:

# import tkinter as tk
# from tkinter import filedialog # يُستخدم لاستيراد وحدة filedialog من مكتبة Tkinter، وهي المسؤولة عن نوافذ اختيار الملفات والمجلدات.
# # هي وحدة جاهزة في Tkinter تُتيح لك فتح نافذة رسومية تسمح للمستخدم باختيار ملف أو حفظه أو اختيار مجلد من جهازه، بدل ما يكتب المسار يدويًا.

# def فتح_ملف(): #  فتح_ملف() تقوم بوظيفة رائعة: فتح ملف نصي وقراءته ثم عرض محتواه داخل منطقة نص (Text Widget) في واجهة Tkinter. 
#     ملف = filedialog.askopenfilename()
#     # يفتح نافذة اختيار ملف (File Explorer).
#     # يرجع المسار الكامل للملف الذي اختاره المستخدم، أو سلسلة فارغة إذا ألغي العملية.

#     if ملف:
#     # إذا المستخدم اختار ملف (يعني السلسلة ليست فارغة)، نستمر.
#     # هذا يمنع البرنامج من محاولة فتح ملف غير موجود.

#         with open(ملف, 'r', encoding='utf-8') as f: 
#         # نفتح الملف بوضع القراءة ('r') مع ترميز UTF-8 لدعم اللغة العربية.
#         # with تستخدم لضمان إغلاق الملف تلقائيًا بعد الانتهاء.
            
#             النص = f.read() # نقرأ كل محتوى الملف في متغير اسمه النص.
#             text_area.insert(tk.END, النص) # ندرج النص داخل عنصر text_area (وهو عنصر Text) في نهاية المحتوى الموجود.

# root = tk.Tk()
# text_area = tk.Text(root) # يُستخدم لإنشاء منطقة نص متعددة الأسطر (Text Widget) داخل واجهة Tkinter.
# # tk.Text	عنصر واجهة رسومية يُستخدم لعرض أو إدخال نصوص طويلة متعددة الأسطر.
# # root	الحاوية (النافذة الرئيسية) التي يتم وضع عنصر النص بداخلها.
# # text_area	اسم المتغير الذي يخزن منطقة النص لنتحكم بها لاحقًا (مثلاً لإضافة نص أو مسحه)

# # 🔧 أوامر مفيدة:
# # الوظيفة	الأمر
# # إدراج نص	text_area.insert(tk.END, "النص")
# # حذف كل النص	text_area.delete("1.0", tk.END)
# # جلب النص	text_area.get("1.0", tk.END)

# text_area.pack()

# button = tk.Button(root, text="فتح ملف", command=فتح_ملف)
# button.pack()

# root.mainloop()

# # ---------------------------------------------------------------------------------------------------------

# # 5. الرسم باستخدام Canvas
# # الاستخدام: رسم أشكال هندسية أو رسومات تفاعلية.
# # مثال:


# import tkinter as tk

# root = tk.Tk()
# canvas = tk.Canvas(root, width=300, height=200, bg="white") # يقوم بإنشاء لوحة رسم (Canvas) داخل نافذة Tkinter، وهي أداة قوية تُستخدم للرسم، عرض الصور، أو إنشاء أشكال هندسية (مثل الدوائر والمستطيلات والخطوط).
# # tk.Canvas	عنصر "لوحة" يُستخدم للرسم أو وضع عناصر رسومية مخصصة.
# # root	النافذة أو الإطار الذي ستظهر فيه الـ Canvas.
# # width=300	عرض اللوحة بـ 300 بكسل.
# # height=200	ارتفاع اللوحة بـ 200 بكسل.
# # bg="white"	لون الخلفية أبيض (يمكن تغييره مثلاً إلى "black" أو "lightblue").
# # canvas	المتغير الذي يخزن اللوحة حتى نستخدمه لاحقًا (لرسم أو تعديل).

# # دائرة (بيضاوي)	create_oval(x1, y1, x2, y2, fill="color")
# # مستطيل	create_rectangle(x1, y1, x2, y2, fill="color")
# # خط	create_line(x1, y1, x2, y2, fill="color", width=2)
# # نص	create_text(x, y, text="مرحبًا", fill="black", font=("Arial", 14))
# # صورة	create_image(x, y, image=my_img)

# canvas.pack()

# canvas.create_rectangle(50, 50, 150, 100, fill="blue")
# # canvas.create_rectangle	دالة لرسم مستطيل على اللوحة.
# # 50, 50	إحداثيات الزاوية العلوية اليسرى للمستطيل (x1, y1).
# # 150, 100	إحداثيات الزاوية السفلية اليمنى للمستطيل (x2, y2).
# # fill="blue"	لون تعبئة المستطيل باللون الأزرق.

# # يمكنك التحكم في:
# # لون الخط: باستخدام outline="red".
# # سُمك الحدود: باستخدام width=3.
# # إزالة الحدود: باستخدام outline="".

# canvas.create_oval(50, 50, 250, 100, fill="red")

# root.mainloop()

# # ---------------------------------------------------------------------------------------------------------

# # 6. استخدام مربعات الرسائل (Message Boxes)
# # الاستخدام: إظهار تنبيهات أو رسائل خطأ أو معلومات للمستخدم.

# # مثال:

# import tkinter as tk
# from tkinter import messagebox

# def عرض_رسالة(): # تُستخدم لعرض نافذة منبثقة (رسالة إعلام) تحتوي على عنوان ونص، باستخدام messagebox من مكتبة Tkinter.
#     messagebox.showinfo("معلومة", "هذا مثال على رسالة")
#     # def عرض_رسالة():	تعريف دالة باسم "عرض_رسالة".
#     # messagebox.showinfo(...)	يعرض رسالة من النوع "Information" (معلومة).

#     # "معلومة" → عنوان النافذة.
#     # "هذا مثال على رسالة" → النص الذي يظهر داخل النافذة.

#     # showinfo	رسالة معلوماتية.
#     # showwarning	رسالة تحذيرية.
#     # showerror	رسالة خطأ.
#     # askquestion	تظهر سؤال وتُرجع "yes" أو "no".
#     # askyesno	تُرجع True أو False بناءً على اختيار المستخدم.

# root = tk.Tk()
# button = tk.Button(root, text="إظهار رسالة", command=عرض_رسالة)
# button.pack()

# root.mainloop()

# # ---------------------------------------------------------------------------------------------------------

# # 7. إنشاء أشرطة تقدم (Progress Bars)
# # الاستخدام: إظهار حالة تقدم عملية ما.

# # مثال:

# import tkinter as tk
# from tkinter import ttk # يقوم باستيراد وحدة ttk من مكتبة Tkinter، وهي اختصار لـ "Themed Tkinter"، وتوفر عناصر واجهة رسومية ذات مظهر حديث مقارنة بالعناصر القديمة في Tkinter.
# ttk عبارة عن نسخة محسّنة من عناصر Tkinter التقليدية مثل
# Button
# Label
# Entry
# Combobox ← (قائمة منسدلة متقدمة)
# Progressbar ← (شريط تحميل)
# Treeview ← (جداول أو عرض بيانات على شكل شجرة)

# 🎯 استخدامات شائعة لـ ttk:
# العنصر	الوظيفة
# ttk.Button	زر بشكل عصري
# ttk.Label	نص محسّن
# ttk.Entry	حقل إدخال
# ttk.Combobox	قائمة منسدلة قابلة للكتابة
# ttk.Progressbar	شريط تقدم
# ttk.Treeview	جدول أو شجرة بيانات

# root = tk.Tk()
# root.geometry("300x100")

# progress = ttk.Progressbar(root, orient="horizontal", length=200, mode="determinate") # ينشئ شريط تحميل (Progressbar) باستخدام ttk في نافذة Tkinter، ويعرض تقدم العملية بشكل أفقي ومحدد (بـ mode "determinate").
# # ttk.Progressbar	عنصر رسومي يُظهر تقدم عملية (مثل تحميل أو معالجة).
# # root	الحاوية الرئيسية التي سيظهر بداخلها الشريط.
# # orient="horizontal"	اتجاه الشريط أفقي (يمكن تغييره إلى "vertical" لو أردت).
# # length=200	طول الشريط بوحدة البكسل.
# # mode="determinate"	الوضع "محدد" → يُستخدم عندما تعرف نسبة التقدم (مثلاً 0% إلى 100%).

# progress.pack(pady=20) # يُستخدم لوضع شريط التقدم (Progressbar) في واجهة Tkinter باستخدام مدير التخطيط pack()، مع إضافة مسافة عمودية (padding) بمقدار 20 بكسل بينه وبين العناصر الأخرى.
# # pady = padding عمودي (فوق/تحت).
# # padx = padding أفقي (يمين/يسار).
# # يمكنك استخدام خصائص إضافية مثل:
# # side="top" / "bottom" / "left" / "right" لتحديد الاتجاه.
# # fill="x" لجعل العنصر يتمدد أفقيًا.
# # expand=True لجعله يحتل المساحة الفارغة.

# progress["value"] = 50  # يقوم بتعيين قيمة شريط التقدم (Progressbar) إلى 50%.
# # progress	هو المتغير الذي يمثل شريط التقدم.
# # "value"	خاصية تحدد نسبة التقدم الحالية.
# # 50	يعني أن التقدم وصل إلى 50%.

# root.mainloop()
